#!/bin/bash
set -e

#################################################
## Helpers
function fatal() {
  echo "$@"
  exit 1
}

function getCiviVer() {
  pushd "$CIVI_CORE" >> /dev/null
    if [ -f xml/version.xml ]; then
      ## Works in any git-based build, even if gencode hasn't run yet.
      php -r 'echo simplexml_load_file("xml/version.xml")->version_no;'
    else
      ## works in any tar-based build.
      php -r 'require "civicrm-version.php"; $a = civicrmVersion(); echo $a["version"];'
    fi
  popd >> /dev/null
}

function show_help() {
  PROG=$(basename "$0")
  echo "about: Execute the CiviCRM test suites"
  echo
  echo "usage: $PROG [options] <suites>"
  echo
  echo "options:"
  echo "  -h                  Display help"
  echo "  -b <build-name>     The name of a local site produced by civibuild (required)"
  echo "  -j <junit-dir>      The path to a folder for storing results in JUnit XML (required)"
  echo "  <suites>            A list of one more of the following:"
  echo "                        - all"
  echo "                        - karma"
  echo "                        - phpunit-api"
  echo "                        - phpunit-civi"
  echo "                        - phpunit-crm"
  echo "                        - phpunit-e2e"
  echo "                        - upgrade"
  echo
  echo "example: Run the KarmaJS and DB-upgrade tests on D7/Civi-Master build"
  echo "  $PROG -b dmaster -j /tmp/junit-output karma upgrade"
  echo
}

#################################################
## Test tasks
##
## Each task is responsible for depositing a JUnit XML file under
## "$JUNITDIR".

function task_phpunit() {
  SUITE="$1"

  if ! $GUARD phpunit-each --exclude-group ornery "$CIVI_CORE" "$JUNITDIR" $SUITE ; then
    EXITCODES="$EXITCODES phpunit"
  fi

  if [ $SUITE = 'E2E_AllTests' ]; then
      $GUARD civibuild restore "$BLDNAME"
  fi

  phpunit-xml-cleanup "$JUNITDIR"/*.xml
}

function task_karma() {
  $GUARD pushd "$CIVI_CORE"
    ## Work-around: ensure pradmin user has sa contact
    ADMIN_USER=$(cv ev 'echo $GLOBALS['_CV']['ADMIN_USER'];')
    drush -u "$ADMIN_USER" cvapi contact.get id=user_contact_id
    if [ -f karma.conf.js ]; then
      if ! $GUARD karma start --browsers PhantomJS --single-run --reporters dots,junit ; then
        EXITCODES="$EXITCODES karma"
      fi
      $GUARD cp tests/output/karma.xml "$JUNITDIR/"
    fi
  $GUARD popd
}

function task_upgrade() {
  ## Run the tests -- DB upgrade tests
  CIVIVER=$(getCiviVer)
  case "$CIVIVER" in
    4.3*)    UTVERS="4.2.9-multilingual_af_bg_en.mysql.bz2 4.3.0*" ;;
    4.4*)    UTVERS="4.2.9-multilingual_af_bg_en.mysql.bz2 4.3.0* 4.4.0*" ;;
    4.5*)    UTVERS="4.2.9-multilingual_af_bg_en.mysql.bz2 4.3.0* 4.4.0* 4.5.0*" ;;
    4.6*)    UTVERS="4.2.9-multilingual_af_bg_en.mysql.bz2 4.3.0* 4.4.0* 4.5.0* 4.6.0*" ;;
    4.7*)    UTVERS="4.2.9-multilingual_af_bg_en.mysql.bz2 4.4.0* 4.5.0* 4.6.0* 4.7.0*" ;;
    master*) UTVERS="4.2.9-multilingual_af_bg_en.mysql.bz2 4.4.0* 4.5.0* 4.6.0* 4.7.0*" ;;
    *)      echo "UpgradeTest failed: Unrecognized version ($CIVIVER)" ; exit 1; ;;
  esac
  if  ! $GUARD civibuild upgrade-test $BLDNAME $UTVERS ; then
    EXITCODES="$EXITCODES upgrade-test"
  fi
  $GUARD cp "$PRJDIR/app/debug/$BLDNAME/civicrm-upgrade-test.xml" "$JUNITDIR/"
  $GUARD civibuild restore "$BLDNAME"
}

#################################################
## Cleanup left-overs from previous test-runs
function junit_cleanup() {
  [ -d "$JUNITDIR" ] && $GUARD rm -rf "$JUNITDIR"
  [ ! -d "$JUNITDIR" ] && $GUARD mkdir "$JUNITDIR"
}

## Determine the absolute path of the directory with the file
## absdirname <file-path>
function absdirname() {
  pushd $(dirname $0) >> /dev/null
    pwd
  popd >> /dev/null
}

BINDIR=$(absdirname "$0")
PRJDIR=$(dirname "$BINDIR")
EXITCODES=
SUITES=
GUARD=

#################################################
## Parse inputs
while [ -n "$1" ] ; do
  if [ $1 = "-b" ] || [ $1 = "-j" ] ; then
    OPTION="$1"
    shift

    case "$OPTION" in
      -b)
        BLDNAME="$1"
        BLDDIR="$PRJDIR/build/$BLDNAME"
        pushd "$BLDDIR"
          CIVI_CORE=$(cv ev 'echo $GLOBALS["civicrm_root"];')
          ## or: cv path -d '[civicrm.root]'
        popd
        shift
        ;;

      -j)
        JUNITDIR="$1"
        junit_cleanup
        shift
        ;;

    esac

  elif [ $1 = "-h" ] || [ $1 = "--help" ] || [ $1 = "-?" ] ; then
    show_help
    exit 2

  else
    SUITES="$SUITES $1"
    shift
  fi
done

## Validate
if [ -z "$SUITES" -o -z "$BLDNAME" -o -z "$JUNITDIR" ]; then
  echo "Error: Missing required argument"
  echo
  show_help
  exit 2
fi

if [ $SUITES = "all" ]; then
  if [ -f "$CIVI_CORE/tests/phpunit/E2E/AllTests.php" ]; then
    SUITES="karma upgrade phpunit-e2e phpunit-crm phpunit-api phpunit-civi"
  else
    SUITES="karma upgrade phpunit-crm phpunit-api phpunit-civi"
  fi
fi

## Main
for TESTTYPE in $SUITES ; do
  case "$TESTTYPE" in
    karma)  task_karma ;;
    upgrade)  task_upgrade ;;
    phpunit-e2e)  task_phpunit E2E_AllTests ;;
    phpunit-crm)  task_phpunit CRM_AllTests ;;
    phpunit-api)  task_phpunit api_v3_AllTests ;;
    phpunit-civi)  task_phpunit 'Civi\AllTests' ;;
    *) echo "unrecognized suite: $TESTTYPE"; exit 2 ;;
  esac
done

## Check test results and set exit code
echo "Check test results and set exit code"
cat "$JUNITDIR"/*.xml | grep '<failure' -q && fatal "Found <failure> in XML"
cat "$JUNITDIR"/*.xml | grep '<error' -q && fatal "Found <error> in XML"
for TESTTYPE in $SUITES ; do
  if  [ $TESTTYPE = "upgrade" ] || [ $TESTTYPE = "all" ] ; then
    [ ! -f "$JUNITDIR/civicrm-upgrade-test.xml" ] && fatal "Missing XML: civicrm-upgrade-test.xml"
  fi
  if  [ $TESTTYPE = "phpunit-crm" ] || [ $TESTTYPE = "all" ] ; then
    [ ! -f "$JUNITDIR/CRM_AllTests.xml" ] && fatal "Missing XML: CRM_AllTests.xml"
  fi
  if  [ $TESTTYPE = "phpunit-api" ] || [ $TESTTYPE = "all" ] ; then
    [ ! -f "$JUNITDIR/api_v3_AllTests.xml" ] && fatal "Missing XML: api_v3_AllTests.xml"
  fi
  if  [ $TESTTYPE = "phpunit-civi" ] || [ $TESTTYPE = "all" ] ; then
    [ ! -f "$JUNITDIR/Civi\\AllTests.xml" ] && fatal "Missing XML: Civi\\AllTests.xml"
  fi
  if  [ $TESTTYPE = "phpunit-e2e" ] || [ $TESTTYPE = "all" ] ; then
    [ ! -f "$JUNITDIR/E2E_AllTests.xml" ] && fatal "Missing XML: E2E_AllTests.xml"
  fi
  if  [ $TESTTYPE = "karma" ] || [ $TESTTYPE = "all" ] ; then
    [ -d "$CIVI_CORE/tests/karma" -a ! -f "$JUNITDIR/karma.xml" ] && fatal "Missing XML: karma.xml"
  fi
done
[ -n "$EXITCODES" ] && fatal "At least one command failed abnormally [$EXITCODES]"
echo "Exit normally"
